// Generated by gencpp from file hello_w/stateRequest.msg
// DO NOT EDIT!


#ifndef HELLO_W_MESSAGE_STATEREQUEST_H
#define HELLO_W_MESSAGE_STATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hello_w
{
template <class ContainerAllocator>
struct stateRequest_
{
  typedef stateRequest_<ContainerAllocator> Type;

  stateRequest_()
    : x1(0.0)
    , y1(0.0)
    , theta1(0.0)
    , v(0.0)
    , w(0.0)  {
    }
  stateRequest_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , y1(0.0)
    , theta1(0.0)
    , v(0.0)
    , w(0.0)  {
  (void)_alloc;
    }



   typedef float _x1_type;
  _x1_type x1;

   typedef float _y1_type;
  _y1_type y1;

   typedef float _theta1_type;
  _theta1_type theta1;

   typedef float _v_type;
  _v_type v;

   typedef float _w_type;
  _w_type w;





  typedef boost::shared_ptr< ::hello_w::stateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello_w::stateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct stateRequest_

typedef ::hello_w::stateRequest_<std::allocator<void> > stateRequest;

typedef boost::shared_ptr< ::hello_w::stateRequest > stateRequestPtr;
typedef boost::shared_ptr< ::hello_w::stateRequest const> stateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello_w::stateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello_w::stateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hello_w

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hello_w::stateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_w::stateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_w::stateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_w::stateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_w::stateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_w::stateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello_w::stateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "434c0a8840b4881875b39b66b5e00e36";
  }

  static const char* value(const ::hello_w::stateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x434c0a8840b48818ULL;
  static const uint64_t static_value2 = 0x75b39b66b5e00e36ULL;
};

template<class ContainerAllocator>
struct DataType< ::hello_w::stateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello_w/stateRequest";
  }

  static const char* value(const ::hello_w::stateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello_w::stateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x1\n"
"float32 y1\n"
"float32 theta1\n"
"float32 v\n"
"float32 w\n"
;
  }

  static const char* value(const ::hello_w::stateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello_w::stateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.theta1);
      stream.next(m.v);
      stream.next(m.w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct stateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello_w::stateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello_w::stateRequest_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<float>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<float>::stream(s, indent + "  ", v.y1);
    s << indent << "theta1: ";
    Printer<float>::stream(s, indent + "  ", v.theta1);
    s << indent << "v: ";
    Printer<float>::stream(s, indent + "  ", v.v);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_W_MESSAGE_STATEREQUEST_H
